// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mu_ind
double mu_ind(double mu, int y, int l);
RcppExport SEXP _clusterCVR_mu_ind(SEXP muSEXP, SEXP ySEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_ind(mu, y, l));
    return rcpp_result_gen;
END_RCPP
}
// mu3_yvec
NumericVector mu3_yvec(arma::cube mu, IntegerVector y);
RcppExport SEXP _clusterCVR_mu3_yvec(SEXP muSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type mu(muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mu3_yvec(mu, y));
    return rcpp_result_gen;
END_RCPP
}
// choice_ind
IntegerVector choice_ind(int M, int L);
RcppExport SEXP _clusterCVR_choice_ind(SEXP MSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(choice_ind(M, L));
    return rcpp_result_gen;
END_RCPP
}
// choice_set
IntegerVector choice_set(int M);
RcppExport SEXP _clusterCVR_choice_set(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(choice_set(M));
    return rcpp_result_gen;
END_RCPP
}
// mu3_yvec_vchoice
NumericVector mu3_yvec_vchoice(arma::cube mu, IntegerVector y, IntegerVector m);
RcppExport SEXP _clusterCVR_mu3_yvec_vchoice(SEXP muSEXP, SEXP ySEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type mu(muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mu3_yvec_vchoice(mu, y, m));
    return rcpp_result_gen;
END_RCPP
}
// ll_vclogit_rcpp
double ll_vclogit_rcpp(NumericVector par, IntegerVector y_j, NumericVector zeta_k, NumericMatrix m_j);
RcppExport SEXP _clusterCVR_ll_vclogit_rcpp(SEXP parSEXP, SEXP y_jSEXP, SEXP zeta_kSEXP, SEXP m_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_j(y_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zeta_k(zeta_kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m_j(m_jSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_vclogit_rcpp(par, y_j, zeta_k, m_j));
    return rcpp_result_gen;
END_RCPP
}
// grad_vclogit_rcpp
NumericVector grad_vclogit_rcpp(NumericVector par, IntegerVector y_j, NumericVector zeta_k, NumericMatrix m_j);
RcppExport SEXP _clusterCVR_grad_vclogit_rcpp(SEXP parSEXP, SEXP y_jSEXP, SEXP zeta_kSEXP, SEXP m_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_j(y_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zeta_k(zeta_kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m_j(m_jSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_vclogit_rcpp(par, y_j, zeta_k, m_j));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clusterCVR_mu_ind", (DL_FUNC) &_clusterCVR_mu_ind, 3},
    {"_clusterCVR_mu3_yvec", (DL_FUNC) &_clusterCVR_mu3_yvec, 2},
    {"_clusterCVR_choice_ind", (DL_FUNC) &_clusterCVR_choice_ind, 2},
    {"_clusterCVR_choice_set", (DL_FUNC) &_clusterCVR_choice_set, 1},
    {"_clusterCVR_mu3_yvec_vchoice", (DL_FUNC) &_clusterCVR_mu3_yvec_vchoice, 3},
    {"_clusterCVR_ll_vclogit_rcpp", (DL_FUNC) &_clusterCVR_ll_vclogit_rcpp, 4},
    {"_clusterCVR_grad_vclogit_rcpp", (DL_FUNC) &_clusterCVR_grad_vclogit_rcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_clusterCVR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
